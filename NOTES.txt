User Story: I can set up the board.
    In order to play the game as a player I can see the board

    nouns (objects): board, player
    verbs (functions/methods): play

    Expect Board to be an array
    Expect 


    Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.


    Any live cell with two or three live neighbours lives on to the next generation.


    Any live cell with more than three live neighbours dies, as if by overpopulation.


    Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.


User Story: When I first arrive at the game, it will randomly generate a board and start playing.


    board
    randomGenerate, startGame

User Story: I can start and stop the board.

    board
    resume, pause

User Story: I can clear the board.

    board
    reset

User Story: When I press start, the game will play out.

    board
    start

User Story: Each time the board changes, I can see how many generations have gone by.

    board
    generationCounter





Array(9).fill().map(() => Array(9).fill())



var width = 10
var height = 10

var cell


const makeBoard = (width, height) => {
    const cell = new Cell()
    make width copies of Cell 
    push those copies into a row
    push row into the board
    repeat for height times
    const row = []
    return []
}

Board = [
    [cell, cell, cell],
    [],
    [],
    [],
    []
]


cell = {

}
















